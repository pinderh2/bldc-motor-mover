
bldc motor mover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033b4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d58  08003d58  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d60  08003d60  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d60  08003d60  00013d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000018  08003d80  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003d80  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099bd  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000161c  00000000  00000000  00029a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f62  00000000  00000000  0002c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab6d  00000000  00000000  00041212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e49  00000000  00000000  0004bd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2bc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f8  00000000  00000000  000d2c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003530 	.word	0x08003530

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08003530 	.word	0x08003530

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <setVelRotPerSecond>:

void setVelRadPerSecond(float velin) {
	motor_velocity = (int32_t)(velin * (2.0*3.1416/1000)*0x7FFFFFFF);
}

void setVelRotPerSecond(float velin) {
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	ed87 0a01 	vstr	s0, [r7, #4]
	motor_velocity = (int32_t)((velin/1000)*0x7FFFFFFF);
 80004d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80004da:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000504 <setVelRotPerSecond+0x38>
 80004de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004e2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000508 <setVelRotPerSecond+0x3c>
 80004e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80004ee:	ee17 2a90 	vmov	r2, s15
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <setVelRotPerSecond+0x40>)
 80004f4:	601a      	str	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	447a0000 	.word	0x447a0000
 8000508:	4f000000 	.word	0x4f000000
 800050c:	20000000 	.word	0x20000000

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f001 f862 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f846 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 fa40 	bl	80009a0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000520:	f000 f8ac 	bl	800067c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000524:	f000 f962 	bl	80007ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8000528:	f000 f9ec 	bl	8000904 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Set all PWM outputs to idle, by setting the compare value to zero.
  // (For timer mode 1, the output is active only when the counter is below the compare value.)
  TIM2->CCR1 = 0;
 800052c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000530:	2200      	movs	r2, #0
 8000532:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 0;
 8000534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000538:	2200      	movs	r2, #0
 800053a:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 0;
 800053c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000540:	2200      	movs	r2, #0
 8000542:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR1 = 0;
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <main+0x88>)
 8000546:	2200      	movs	r2, #0
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <main+0x88>)
 800054c:	2200      	movs	r2, #0
 800054e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <main+0x88>)
 8000552:	2200      	movs	r2, #0
 8000554:	63da      	str	r2, [r3, #60]	; 0x3c

  // Now start up all the timers - 6 PWMs and one periodic timer
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	4810      	ldr	r0, [pc, #64]	; (800059c <main+0x8c>)
 800055a:	f002 f8b3 	bl	80026c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800055e:	2104      	movs	r1, #4
 8000560:	480e      	ldr	r0, [pc, #56]	; (800059c <main+0x8c>)
 8000562:	f002 f8af 	bl	80026c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000566:	2108      	movs	r1, #8
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <main+0x8c>)
 800056a:	f002 f8ab 	bl	80026c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800056e:	2100      	movs	r1, #0
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <main+0x90>)
 8000572:	f002 f8a7 	bl	80026c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000576:	2104      	movs	r1, #4
 8000578:	4809      	ldr	r0, [pc, #36]	; (80005a0 <main+0x90>)
 800057a:	f002 f8a3 	bl	80026c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800057e:	2108      	movs	r1, #8
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <main+0x90>)
 8000582:	f002 f89f 	bl	80026c4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000586:	4807      	ldr	r0, [pc, #28]	; (80005a4 <main+0x94>)
 8000588:	f001 ffe0 	bl	800254c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setVelRotPerSecond(3);
 800058c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8000590:	f7ff ff9c 	bl	80004cc <setVelRotPerSecond>
  while (1)
 8000594:	e7fe      	b.n	8000594 <main+0x84>
 8000596:	bf00      	nop
 8000598:	40010000 	.word	0x40010000
 800059c:	200000c8 	.word	0x200000c8
 80005a0:	20000080 	.word	0x20000080
 80005a4:	20000038 	.word	0x20000038

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 ffb2 	bl	8003520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a27      	ldr	r2, [pc, #156]	; (8000674 <SystemClock_Config+0xcc>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f4:	4a20      	ldr	r2, [pc, #128]	; (8000678 <SystemClock_Config+0xd0>)
 80005f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800061c:	2308      	movs	r3, #8
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000620:	2354      	movs	r3, #84	; 0x54
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fb27 	bl	8001c84 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800063c:	f000 fe72 	bl	8001324 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2102      	movs	r1, #2
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fd89 	bl	8002174 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000668:	f000 fe5c 	bl	8001324 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	; 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b096      	sub	sp, #88	; 0x58
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000682:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000690:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
 80006aa:	615a      	str	r2, [r3, #20]
 80006ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2220      	movs	r2, #32
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 ff33 	bl	8003520 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ba:	4b4a      	ldr	r3, [pc, #296]	; (80007e4 <MX_TIM1_Init+0x168>)
 80006bc:	4a4a      	ldr	r2, [pc, #296]	; (80007e8 <MX_TIM1_Init+0x16c>)
 80006be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006c0:	4b48      	ldr	r3, [pc, #288]	; (80007e4 <MX_TIM1_Init+0x168>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b47      	ldr	r3, [pc, #284]	; (80007e4 <MX_TIM1_Init+0x168>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3360;
 80006cc:	4b45      	ldr	r3, [pc, #276]	; (80007e4 <MX_TIM1_Init+0x168>)
 80006ce:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80006d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d4:	4b43      	ldr	r3, [pc, #268]	; (80007e4 <MX_TIM1_Init+0x168>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006da:	4b42      	ldr	r3, [pc, #264]	; (80007e4 <MX_TIM1_Init+0x168>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006e0:	4b40      	ldr	r3, [pc, #256]	; (80007e4 <MX_TIM1_Init+0x168>)
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006e6:	483f      	ldr	r0, [pc, #252]	; (80007e4 <MX_TIM1_Init+0x168>)
 80006e8:	f001 fee0 	bl	80024ac <HAL_TIM_Base_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80006f2:	f000 fe17 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000700:	4619      	mov	r1, r3
 8000702:	4838      	ldr	r0, [pc, #224]	; (80007e4 <MX_TIM1_Init+0x168>)
 8000704:	f002 fa58 	bl	8002bb8 <HAL_TIM_ConfigClockSource>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800070e:	f000 fe09 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000712:	4834      	ldr	r0, [pc, #208]	; (80007e4 <MX_TIM1_Init+0x168>)
 8000714:	f001 ff7c 	bl	8002610 <HAL_TIM_PWM_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800071e:	f000 fe01 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000722:	2300      	movs	r3, #0
 8000724:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800072e:	4619      	mov	r1, r3
 8000730:	482c      	ldr	r0, [pc, #176]	; (80007e4 <MX_TIM1_Init+0x168>)
 8000732:	f002 fdfd 	bl	8003330 <HAL_TIMEx_MasterConfigSynchronization>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800073c:	f000 fdf2 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000740:	2360      	movs	r3, #96	; 0x60
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000748:	2300      	movs	r3, #0
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800074c:	2300      	movs	r3, #0
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000750:	2304      	movs	r3, #4
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	2200      	movs	r2, #0
 8000762:	4619      	mov	r1, r3
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <MX_TIM1_Init+0x168>)
 8000766:	f002 f965 	bl	8002a34 <HAL_TIM_PWM_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000770:	f000 fdd8 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000778:	2204      	movs	r2, #4
 800077a:	4619      	mov	r1, r3
 800077c:	4819      	ldr	r0, [pc, #100]	; (80007e4 <MX_TIM1_Init+0x168>)
 800077e:	f002 f959 	bl	8002a34 <HAL_TIM_PWM_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000788:	f000 fdcc 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800078c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000790:	2208      	movs	r2, #8
 8000792:	4619      	mov	r1, r3
 8000794:	4813      	ldr	r0, [pc, #76]	; (80007e4 <MX_TIM1_Init+0x168>)
 8000796:	f002 f94d 	bl	8002a34 <HAL_TIM_PWM_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80007a0:	f000 fdc0 	bl	8001324 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4619      	mov	r1, r3
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <MX_TIM1_Init+0x168>)
 80007c8:	f002 fe20 	bl	800340c <HAL_TIMEx_ConfigBreakDeadTime>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80007d2:	f000 fda7 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007d6:	4803      	ldr	r0, [pc, #12]	; (80007e4 <MX_TIM1_Init+0x168>)
 80007d8:	f000 fe24 	bl	8001424 <HAL_TIM_MspPostInit>

}
 80007dc:	bf00      	nop
 80007de:	3758      	adds	r7, #88	; 0x58
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000080 	.word	0x20000080
 80007e8:	40010000 	.word	0x40010000

080007ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
 8000818:	615a      	str	r2, [r3, #20]
 800081a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800081c:	4b38      	ldr	r3, [pc, #224]	; (8000900 <MX_TIM2_Init+0x114>)
 800081e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000824:	4b36      	ldr	r3, [pc, #216]	; (8000900 <MX_TIM2_Init+0x114>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <MX_TIM2_Init+0x114>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3360;
 8000830:	4b33      	ldr	r3, [pc, #204]	; (8000900 <MX_TIM2_Init+0x114>)
 8000832:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b31      	ldr	r3, [pc, #196]	; (8000900 <MX_TIM2_Init+0x114>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <MX_TIM2_Init+0x114>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000844:	482e      	ldr	r0, [pc, #184]	; (8000900 <MX_TIM2_Init+0x114>)
 8000846:	f001 fe31 	bl	80024ac <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000850:	f000 fd68 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800085a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085e:	4619      	mov	r1, r3
 8000860:	4827      	ldr	r0, [pc, #156]	; (8000900 <MX_TIM2_Init+0x114>)
 8000862:	f002 f9a9 	bl	8002bb8 <HAL_TIM_ConfigClockSource>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800086c:	f000 fd5a 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000870:	4823      	ldr	r0, [pc, #140]	; (8000900 <MX_TIM2_Init+0x114>)
 8000872:	f001 fecd 	bl	8002610 <HAL_TIM_PWM_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800087c:	f000 fd52 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000888:	f107 0320 	add.w	r3, r7, #32
 800088c:	4619      	mov	r1, r3
 800088e:	481c      	ldr	r0, [pc, #112]	; (8000900 <MX_TIM2_Init+0x114>)
 8000890:	f002 fd4e 	bl	8003330 <HAL_TIMEx_MasterConfigSynchronization>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800089a:	f000 fd43 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089e:	2360      	movs	r3, #96	; 0x60
 80008a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80008aa:	2304      	movs	r3, #4
 80008ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	4619      	mov	r1, r3
 80008b4:	4812      	ldr	r0, [pc, #72]	; (8000900 <MX_TIM2_Init+0x114>)
 80008b6:	f002 f8bd 	bl	8002a34 <HAL_TIM_PWM_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80008c0:	f000 fd30 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2204      	movs	r2, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_TIM2_Init+0x114>)
 80008cc:	f002 f8b2 	bl	8002a34 <HAL_TIM_PWM_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80008d6:	f000 fd25 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2208      	movs	r2, #8
 80008de:	4619      	mov	r1, r3
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <MX_TIM2_Init+0x114>)
 80008e2:	f002 f8a7 	bl	8002a34 <HAL_TIM_PWM_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80008ec:	f000 fd1a 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <MX_TIM2_Init+0x114>)
 80008f2:	f000 fd97 	bl	8001424 <HAL_TIM_MspPostInit>

}
 80008f6:	bf00      	nop
 80008f8:	3738      	adds	r7, #56	; 0x38
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000c8 	.word	0x200000c8

08000904 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_TIM3_Init+0x94>)
 8000922:	4a1e      	ldr	r2, [pc, #120]	; (800099c <MX_TIM3_Init+0x98>)
 8000924:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_TIM3_Init+0x94>)
 8000928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800092c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_TIM3_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 84;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_TIM3_Init+0x94>)
 8000936:	2254      	movs	r2, #84	; 0x54
 8000938:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_TIM3_Init+0x94>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_TIM3_Init+0x94>)
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000946:	4814      	ldr	r0, [pc, #80]	; (8000998 <MX_TIM3_Init+0x94>)
 8000948:	f001 fdb0 	bl	80024ac <HAL_TIM_Base_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000952:	f000 fce7 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	4619      	mov	r1, r3
 8000962:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_TIM3_Init+0x94>)
 8000964:	f002 f928 	bl	8002bb8 <HAL_TIM_ConfigClockSource>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 fcd9 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_TIM3_Init+0x94>)
 8000980:	f002 fcd6 	bl	8003330 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800098a:	f000 fccb 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000038 	.word	0x20000038
 800099c:	40000400 	.word	0x40000400

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b35      	ldr	r3, [pc, #212]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a34      	ldr	r2, [pc, #208]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b32      	ldr	r3, [pc, #200]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a2d      	ldr	r2, [pc, #180]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a26      	ldr	r2, [pc, #152]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <MX_GPIO_Init+0xf0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a10:	4820      	ldr	r0, [pc, #128]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a12:	f001 f8eb 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2108      	movs	r1, #8
 8000a1a:	481f      	ldr	r0, [pc, #124]	; (8000a98 <MX_GPIO_Init+0xf8>)
 8000a1c:	f001 f8e6 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4619      	mov	r1, r3
 8000a38:	4816      	ldr	r0, [pc, #88]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a3a:	f000 ff53 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a3e:	2308      	movs	r3, #8
 8000a40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	4619      	mov	r1, r3
 8000a54:	4810      	ldr	r0, [pc, #64]	; (8000a98 <MX_GPIO_Init+0xf8>)
 8000a56:	f000 ff45 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000a5a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a60:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480a      	ldr	r0, [pc, #40]	; (8000a9c <MX_GPIO_Init+0xfc>)
 8000a72:	f000 ff37 	bl	80018e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2017      	movs	r0, #23
 8000a7c:	f000 fefb 	bl	8001876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a80:	2017      	movs	r0, #23
 8000a82:	f000 ff14 	bl	80018ae <HAL_NVIC_EnableIRQ>

}
 8000a86:	bf00      	nop
 8000a88:	3720      	adds	r7, #32
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	4803      	ldr	r0, [pc, #12]	; (8000abc <HAL_GPIO_EXTI_Callback+0x1c>)
 8000ab0:	f001 f8b5 	bl	8001c1e <HAL_GPIO_TogglePin>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40020800 	.word	0x40020800

08000ac0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2108      	movs	r1, #8
 8000acc:	48a6      	ldr	r0, [pc, #664]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000ace:	f001 f88d 	bl	8001bec <HAL_GPIO_WritePin>
	// This gets called every millisecond.
	// Compute the next desired motor position, and update
	// the PWM settings.
	int control_phase;
	int on_val = (overall_power * PWM_MAX) >> 16;
 8000ad2:	4ba6      	ldr	r3, [pc, #664]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f44f 6352 	mov.w	r3, #3360	; 0xd20
 8000ade:	fb03 f302 	mul.w	r3, r3, r2
 8000ae2:	141b      	asrs	r3, r3, #16
 8000ae4:	617b      	str	r3, [r7, #20]

	// Update desired motor position
	shaft_phase += motor_velocity;
 8000ae6:	4ba2      	ldr	r3, [pc, #648]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	4ba1      	ldr	r3, [pc, #644]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4aa0      	ldr	r2, [pc, #640]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000af4:	6013      	str	r3, [r2, #0]

	// Convert motor position to phase position in terms of number of complete electrical phases
	uint32_t phase_position = 0xffff & ((shaft_phase >> 16) * BLDC_MAGNETS_PER_REV);
 8000af6:	4b9f      	ldr	r3, [pc, #636]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	0c1b      	lsrs	r3, r3, #16
 8000afc:	2207      	movs	r2, #7
 8000afe:	fb02 f303 	mul.w	r3, r2, r3
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	613b      	str	r3, [r7, #16]

	// Determine PWM settings from desired phase position
	switch (control_mode)
 8000b06:	4b9c      	ldr	r3, [pc, #624]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	f200 83e7 	bhi.w	80012de <HAL_TIM_PeriodElapsedCallback+0x81e>
 8000b10:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b16:	bf00      	nop
 8000b18:	08000b29 	.word	0x08000b29
 8000b1c:	08000c73 	.word	0x08000c73
 8000b20:	08000de3 	.word	0x08000de3
 8000b24:	08001055 	.word	0x08001055
	{
	case CONTROL_6_PHASE:
		control_phase = (phase_position * 6) >> 16;  // results in number from 0 to 5
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	4413      	add	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	0c1b      	lsrs	r3, r3, #16
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b05      	cmp	r3, #5
 8000b3a:	f200 83c9 	bhi.w	80012d0 <HAL_TIM_PeriodElapsedCallback+0x810>
 8000b3e:	a201      	add	r2, pc, #4	; (adr r2, 8000b44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b44:	08000b5d 	.word	0x08000b5d
 8000b48:	08000b8b 	.word	0x08000b8b
 8000b4c:	08000bb9 	.word	0x08000bb9
 8000b50:	08000be7 	.word	0x08000be7
 8000b54:	08000c15 	.word	0x08000c15
 8000b58:	08000c43 	.word	0x08000c43
		switch (control_phase)
		{
		case 0:
			// A+, B-
			TIM1->CCR1 = on_val;
 8000b5c:	4a87      	ldr	r2, [pc, #540]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = 0;
 8000b62:	4b86      	ldr	r3, [pc, #536]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8000b68:	4b84      	ldr	r3, [pc, #528]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = 0;
 8000b6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b72:	2200      	movs	r2, #0
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = PWM_MAX;
 8000b76:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000b7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b7e:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 8000b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b84:	2200      	movs	r2, #0
 8000b86:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000b88:	e072      	b.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		case 1:
			// A+, C-
			TIM1->CCR1 = on_val;
 8000b8a:	4a7c      	ldr	r2, [pc, #496]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = 0;
 8000b90:	4b7a      	ldr	r3, [pc, #488]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8000b96:	4b79      	ldr	r3, [pc, #484]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = 0;
 8000b9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8000ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba8:	2200      	movs	r2, #0
 8000baa:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = PWM_MAX;
 8000bac:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000bb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bb4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000bb6:	e05b      	b.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		case 2:
			// B+, C-
			TIM1->CCR1 = 0;
 8000bb8:	4b70      	ldr	r3, [pc, #448]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = on_val;
 8000bbe:	4a6f      	ldr	r2, [pc, #444]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = 0;
 8000bc4:	4b6d      	ldr	r3, [pc, #436]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = 0;
 8000bca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bce:	2200      	movs	r2, #0
 8000bd0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8000bd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = PWM_MAX;
 8000bda:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000bde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be2:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000be4:	e044      	b.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		case 3:
			// B+, A-
			TIM1->CCR1 = 0;
 8000be6:	4b65      	ldr	r3, [pc, #404]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = on_val;
 8000bec:	4a63      	ldr	r2, [pc, #396]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = 0;
 8000bf2:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = PWM_MAX;
 8000bf8:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000bfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8000c02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c06:	2200      	movs	r2, #0
 8000c08:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 8000c0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c0e:	2200      	movs	r2, #0
 8000c10:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000c12:	e02d      	b.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		case 4:
			// C+, A-
			TIM1->CCR1 = 0;
 8000c14:	4b59      	ldr	r3, [pc, #356]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8000c1a:	4b58      	ldr	r3, [pc, #352]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = on_val;
 8000c20:	4a56      	ldr	r2, [pc, #344]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM2->CCR1 = PWM_MAX;
 8000c26:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000c2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8000c30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c34:	2200      	movs	r2, #0
 8000c36:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 8000c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000c40:	e016      	b.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		case 5:
			// C+, B-
			TIM1->CCR1 = 0;
 8000c42:	4b4e      	ldr	r3, [pc, #312]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8000c48:	4b4c      	ldr	r3, [pc, #304]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = on_val;
 8000c4e:	4a4b      	ldr	r2, [pc, #300]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM2->CCR1 = 0;
 8000c54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c58:	2200      	movs	r2, #0
 8000c5a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = PWM_MAX;
 8000c5c:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c64:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 8000c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000c6e:	bf00      	nop
		}
		break;
 8000c70:	e32e      	b.n	80012d0 <HAL_TIM_PeriodElapsedCallback+0x810>
	case CONTROL_6_PHASE_IFX007:
		control_phase = (phase_position * 6) >> 16;  // results in number from 0 to 5
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	0c1b      	lsrs	r3, r3, #16
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b05      	cmp	r3, #5
 8000c84:	f200 8326 	bhi.w	80012d4 <HAL_TIM_PeriodElapsedCallback+0x814>
 8000c88:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8e:	bf00      	nop
 8000c90:	08000ca9 	.word	0x08000ca9
 8000c94:	08000cd9 	.word	0x08000cd9
 8000c98:	08000d09 	.word	0x08000d09
 8000c9c:	08000d39 	.word	0x08000d39
 8000ca0:	08000d81 	.word	0x08000d81
 8000ca4:	08000db1 	.word	0x08000db1
		switch (control_phase)
		{
		case 0:
			// A+, B-
			TIM1->CCR1 = PWM_MAX;
 8000ca8:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000cac:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000cae:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = on_val;
 8000cb0:	4a32      	ldr	r2, [pc, #200]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = 0;
 8000cb6:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = PWM_MAX;
 8000cbc:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000cc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8000cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cca:	2200      	movs	r2, #0
 8000ccc:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 8000cce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000cd6:	e083      	b.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x320>
		case 1:
			// A+, C-
			TIM1->CCR1 = PWM_MAX;
 8000cd8:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000cde:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = on_val;
 8000ce6:	4a25      	ldr	r2, [pc, #148]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM2->CCR1 = PWM_MAX;
 8000cec:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000cf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8000cf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 8000cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d02:	2200      	movs	r2, #0
 8000d04:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000d06:	e06b      	b.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x320>
		case 2:
			// B+, C-
			TIM1->CCR1 = 0;
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = PWM_MAX;
 8000d0e:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d14:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = on_val;
 8000d16:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM2->CCR1 = 0;
 8000d1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d20:	2200      	movs	r2, #0
 8000d22:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = PWM_MAX;
 8000d24:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000d28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d2c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 8000d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d32:	2200      	movs	r2, #0
 8000d34:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000d36:	e053      	b.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x320>
		case 3:
			// B+, A-
			TIM1->CCR1 = on_val;
 8000d38:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = PWM_MAX;
 8000d3e:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d44:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = 0;
 8000d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d50:	2200      	movs	r2, #0
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = PWM_MAX;
 8000d54:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000d58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d5c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 8000d5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d62:	2200      	movs	r2, #0
 8000d64:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000d66:	e03b      	b.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x320>
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	20000004 	.word	0x20000004
 8000d70:	20000000 	.word	0x20000000
 8000d74:	20000034 	.word	0x20000034
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	40010000 	.word	0x40010000
		case 4:
			// C+, A-
			TIM1->CCR1 = on_val;
 8000d80:	4ab3      	ldr	r2, [pc, #716]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = 0;
 8000d86:	4bb2      	ldr	r3, [pc, #712]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = PWM_MAX;
 8000d8c:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000d90:	4baf      	ldr	r3, [pc, #700]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000d92:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = 0;
 8000d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d98:	2200      	movs	r2, #0
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8000d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da0:	2200      	movs	r2, #0
 8000da2:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = PWM_MAX;
 8000da4:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000da8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dac:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000dae:	e017      	b.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x320>
		case 5:
			// C+, B-
			TIM1->CCR1 = 0;
 8000db0:	4ba7      	ldr	r3, [pc, #668]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = on_val;
 8000db6:	4aa6      	ldr	r2, [pc, #664]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = PWM_MAX;
 8000dbc:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000dc0:	4ba3      	ldr	r3, [pc, #652]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000dc2:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = 0;
 8000dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc8:	2200      	movs	r2, #0
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8000dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = PWM_MAX;
 8000dd4:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000dd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000dde:	bf00      	nop
		}
		break;
 8000de0:	e278      	b.n	80012d4 <HAL_TIM_PeriodElapsedCallback+0x814>
	case CONTROL_SINUSOIDAL:
		control_phase = (phase_position * 1024) >> 16;  // results in number from 0 to 1023
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	029b      	lsls	r3, r3, #10
 8000de6:	0c1b      	lsrs	r3, r3, #16
 8000de8:	60fb      	str	r3, [r7, #12]
		switch (control_phase * 6 / 1024)
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	da01      	bge.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x33c>
 8000df8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000dfc:	129b      	asrs	r3, r3, #10
 8000dfe:	2b05      	cmp	r3, #5
 8000e00:	f200 826a 	bhi.w	80012d8 <HAL_TIM_PeriodElapsedCallback+0x818>
 8000e04:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e25 	.word	0x08000e25
 8000e10:	08000e7d 	.word	0x08000e7d
 8000e14:	08000edf 	.word	0x08000edf
 8000e18:	08000f37 	.word	0x08000f37
 8000e1c:	08000f93 	.word	0x08000f93
 8000e20:	08000ff1 	.word	0x08000ff1
		{
		case 0:
			// PWM: A+, C+,   B- on
			TIM1->CCR1 = (on_val * sin_x(control_phase + A_OFFSET)) >> 15;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fa65 	bl	80012f8 <sin_x>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fb03 f302 	mul.w	r3, r3, r2
 8000e36:	13da      	asrs	r2, r3, #15
 8000e38:	4b85      	ldr	r3, [pc, #532]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8000e3c:	4b84      	ldr	r3, [pc, #528]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = (on_val * sin_x(control_phase + C_OFFSET)) >> 15;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	f203 1355 	addw	r3, r3, #341	; 0x155
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fa53 	bl	80012f8 <sin_x>
 8000e52:	4602      	mov	r2, r0
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fb03 f302 	mul.w	r3, r3, r2
 8000e5a:	13da      	asrs	r2, r3, #15
 8000e5c:	4b7c      	ldr	r3, [pc, #496]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000e5e:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = 0;
 8000e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e64:	2200      	movs	r2, #0
 8000e66:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = PWM_MAX;
 8000e68:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000e6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e70:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 8000e72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e76:	2200      	movs	r2, #0
 8000e78:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000e7a:	e0e7      	b.n	800104c <HAL_TIM_PeriodElapsedCallback+0x58c>
		case 1:
			// PSM: C-, B-    A+ on
			TIM1->CCR1 = PWM_MAX;
 8000e7c:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000e80:	4b73      	ldr	r3, [pc, #460]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000e82:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8000e84:	4b72      	ldr	r3, [pc, #456]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8000e8a:	4b71      	ldr	r3, [pc, #452]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = 0;
 8000e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e94:	2200      	movs	r2, #0
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = (on_val * -sin_x(control_phase + B_OFFSET)) >> 15;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fa28 	bl	80012f8 <sin_x>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	425b      	negs	r3, r3
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	fb02 f303 	mul.w	r3, r2, r3
 8000eb2:	13da      	asrs	r2, r3, #15
 8000eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb8:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = (on_val * -sin_x(control_phase + C_OFFSET)) >> 15;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	f203 1355 	addw	r3, r3, #341	; 0x155
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fa17 	bl	80012f8 <sin_x>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	425b      	negs	r3, r3
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	fb02 f303 	mul.w	r3, r2, r3
 8000ed4:	13da      	asrs	r2, r3, #15
 8000ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eda:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000edc:	e0b6      	b.n	800104c <HAL_TIM_PeriodElapsedCallback+0x58c>
		case 2:
			// PWM: A+, B+,    C- on
			TIM1->CCR1 = (on_val * sin_x(control_phase + A_OFFSET)) >> 15;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fa08 	bl	80012f8 <sin_x>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fb03 f302 	mul.w	r3, r3, r2
 8000ef0:	13da      	asrs	r2, r3, #15
 8000ef2:	4b57      	ldr	r3, [pc, #348]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000ef4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = (on_val * sin_x(control_phase + B_OFFSET)) >> 15;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f9f9 	bl	80012f8 <sin_x>
 8000f06:	4602      	mov	r2, r0
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fb03 f302 	mul.w	r3, r3, r2
 8000f0e:	13da      	asrs	r2, r3, #15
 8000f10:	4b4f      	ldr	r3, [pc, #316]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f12:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8000f14:	4b4e      	ldr	r3, [pc, #312]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = 0;
 8000f1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f1e:	2200      	movs	r2, #0
 8000f20:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8000f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f26:	2200      	movs	r2, #0
 8000f28:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = PWM_MAX;
 8000f2a:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f32:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000f34:	e08a      	b.n	800104c <HAL_TIM_PeriodElapsedCallback+0x58c>
		case 3:
			// PWM: A-, C-    B+ on
			TIM1->CCR1 = 0;
 8000f36:	4b46      	ldr	r3, [pc, #280]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = PWM_MAX;
 8000f3c:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000f40:	4b43      	ldr	r3, [pc, #268]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f42:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8000f44:	4b42      	ldr	r3, [pc, #264]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = (on_val * -sin_x(control_phase + A_OFFSET)) >> 15;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f9d2 	bl	80012f8 <sin_x>
 8000f54:	4603      	mov	r3, r0
 8000f56:	425b      	negs	r3, r3
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	13da      	asrs	r2, r3, #15
 8000f60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f64:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8000f66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = (on_val * -sin_x(control_phase + C_OFFSET)) >> 15;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	f203 1355 	addw	r3, r3, #341	; 0x155
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f9bd 	bl	80012f8 <sin_x>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	425b      	negs	r3, r3
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	13da      	asrs	r2, r3, #15
 8000f8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f8e:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000f90:	e05c      	b.n	800104c <HAL_TIM_PeriodElapsedCallback+0x58c>
		case 4:
			// PWM: B+, C+,   A- on
			TIM1->CCR1 = 0;
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = (on_val * sin_x(control_phase + B_OFFSET)) >> 15;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f9a8 	bl	80012f8 <sin_x>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	fb03 f302 	mul.w	r3, r3, r2
 8000fb0:	13da      	asrs	r2, r3, #15
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000fb4:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = (on_val * sin_x(control_phase + C_OFFSET)) >> 15;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	f203 1355 	addw	r3, r3, #341	; 0x155
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f999 	bl	80012f8 <sin_x>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fb03 f302 	mul.w	r3, r3, r2
 8000fce:	13da      	asrs	r2, r3, #15
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000fd2:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = PWM_MAX;
 8000fd4:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fdc:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8000fde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 8000fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fea:	2200      	movs	r2, #0
 8000fec:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000fee:	e02d      	b.n	800104c <HAL_TIM_PeriodElapsedCallback+0x58c>
		case 5:
			// PWM: A-, B-    C+ on
			TIM1->CCR1 = 0;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = PWM_MAX;
 8000ffc:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001002:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = (on_val * -sin_x(control_phase + A_OFFSET)) >> 15;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	b29b      	uxth	r3, r3
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f975 	bl	80012f8 <sin_x>
 800100e:	4603      	mov	r3, r0
 8001010:	425b      	negs	r3, r3
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	fb02 f303 	mul.w	r3, r2, r3
 8001018:	13da      	asrs	r2, r3, #15
 800101a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = (on_val * -sin_x(control_phase + B_OFFSET)) >> 15;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	b29b      	uxth	r3, r3
 8001024:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001028:	b29b      	uxth	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f964 	bl	80012f8 <sin_x>
 8001030:	4603      	mov	r3, r0
 8001032:	425b      	negs	r3, r3
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	fb02 f303 	mul.w	r3, r2, r3
 800103a:	13da      	asrs	r2, r3, #15
 800103c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001040:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 8001042:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001046:	2200      	movs	r2, #0
 8001048:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800104a:	bf00      	nop
		}
		break;
 800104c:	e144      	b.n	80012d8 <HAL_TIM_PeriodElapsedCallback+0x818>
 800104e:	bf00      	nop
 8001050:	40010000 	.word	0x40010000
	case CONTROL_SINUSOIDAL_IFX007:
		control_phase = (phase_position * 1024) >> 16;  // results in number from 0 to 1023
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	029b      	lsls	r3, r3, #10
 8001058:	0c1b      	lsrs	r3, r3, #16
 800105a:	60fb      	str	r3, [r7, #12]
		switch (control_phase * 6 / 1024)
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	da01      	bge.n	800106e <HAL_TIM_PeriodElapsedCallback+0x5ae>
 800106a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800106e:	129b      	asrs	r3, r3, #10
 8001070:	2b05      	cmp	r3, #5
 8001072:	f200 8133 	bhi.w	80012dc <HAL_TIM_PeriodElapsedCallback+0x81c>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	08001095 	.word	0x08001095
 8001080:	080010f1 	.word	0x080010f1
 8001084:	08001155 	.word	0x08001155
 8001088:	080011b1 	.word	0x080011b1
 800108c:	0800120f 	.word	0x0800120f
 8001090:	08001271 	.word	0x08001271
		{
		case 0:
			// PWM: A+, C+,   B- on
			TIM1->CCR1 = (on_val * sin_x(control_phase + A_OFFSET)) >> 15;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f92d 	bl	80012f8 <sin_x>
 800109e:	4602      	mov	r2, r0
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fb03 f302 	mul.w	r3, r3, r2
 80010a6:	13da      	asrs	r2, r3, #15
 80010a8:	4b91      	ldr	r3, [pc, #580]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = PWM_MAX;
 80010ac:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80010b0:	4b8f      	ldr	r3, [pc, #572]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80010b2:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = (on_val * sin_x(control_phase + C_OFFSET)) >> 15;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	f203 1355 	addw	r3, r3, #341	; 0x155
 80010bc:	b29b      	uxth	r3, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f91a 	bl	80012f8 <sin_x>
 80010c4:	4602      	mov	r2, r0
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	fb03 f302 	mul.w	r3, r3, r2
 80010cc:	13da      	asrs	r2, r3, #15
 80010ce:	4b88      	ldr	r3, [pc, #544]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80010d0:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = PWM_MAX;
 80010d2:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80010d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010da:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 80010dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010e0:	2200      	movs	r2, #0
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = PWM_MAX;
 80010e4:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80010e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ec:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80010ee:	e0ee      	b.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x80e>
		case 1:
			// PSM: C-, B-    A+ on
			TIM1->CCR1 = PWM_MAX;
 80010f0:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80010f4:	4b7e      	ldr	r3, [pc, #504]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = (on_val * -sin_x(control_phase + B_OFFSET)) >> 15;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001100:	b29b      	uxth	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f8f8 	bl	80012f8 <sin_x>
 8001108:	4603      	mov	r3, r0
 800110a:	425b      	negs	r3, r3
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	fb02 f303 	mul.w	r3, r2, r3
 8001112:	13da      	asrs	r2, r3, #15
 8001114:	4b76      	ldr	r3, [pc, #472]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001116:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = (on_val * -sin_x(control_phase + C_OFFSET)) >> 15;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	b29b      	uxth	r3, r3
 800111c:	f203 1355 	addw	r3, r3, #341	; 0x155
 8001120:	b29b      	uxth	r3, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f8e8 	bl	80012f8 <sin_x>
 8001128:	4603      	mov	r3, r0
 800112a:	425b      	negs	r3, r3
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	fb02 f303 	mul.w	r3, r2, r3
 8001132:	13da      	asrs	r2, r3, #15
 8001134:	4b6e      	ldr	r3, [pc, #440]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = PWM_MAX;
 8001138:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 800113c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8001142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001146:	2200      	movs	r2, #0
 8001148:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 800114a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800114e:	2200      	movs	r2, #0
 8001150:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001152:	e0bc      	b.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x80e>
		case 2:
			// PWM: A+, B+,    C- on
			TIM1->CCR1 = (on_val * sin_x(control_phase + A_OFFSET)) >> 15;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	b29b      	uxth	r3, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f8cd 	bl	80012f8 <sin_x>
 800115e:	4602      	mov	r2, r0
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fb03 f302 	mul.w	r3, r3, r2
 8001166:	13da      	asrs	r2, r3, #15
 8001168:	4b61      	ldr	r3, [pc, #388]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = (on_val * sin_x(control_phase + B_OFFSET)) >> 15;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	b29b      	uxth	r3, r3
 8001170:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001174:	b29b      	uxth	r3, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f8be 	bl	80012f8 <sin_x>
 800117c:	4602      	mov	r2, r0
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fb03 f302 	mul.w	r3, r3, r2
 8001184:	13da      	asrs	r2, r3, #15
 8001186:	4b5a      	ldr	r3, [pc, #360]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001188:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = PWM_MAX;
 800118a:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 800118e:	4b58      	ldr	r3, [pc, #352]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001190:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = PWM_MAX;
 8001192:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = PWM_MAX;
 800119c:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80011a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a4:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 80011a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011aa:	2200      	movs	r2, #0
 80011ac:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80011ae:	e08e      	b.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x80e>
		case 3:
			// PWM: A-, C-    B+ on
			TIM1->CCR1 = (on_val * -sin_x(control_phase + A_OFFSET)) >> 15;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f89f 	bl	80012f8 <sin_x>
 80011ba:	4603      	mov	r3, r0
 80011bc:	425b      	negs	r3, r3
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	13da      	asrs	r2, r3, #15
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = PWM_MAX;
 80011ca:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80011ce:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = (on_val * -sin_x(control_phase + C_OFFSET)) >> 15;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	f203 1355 	addw	r3, r3, #341	; 0x155
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f88b 	bl	80012f8 <sin_x>
 80011e2:	4603      	mov	r3, r0
 80011e4:	425b      	negs	r3, r3
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	fb02 f303 	mul.w	r3, r2, r3
 80011ec:	13da      	asrs	r2, r3, #15
 80011ee:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80011f0:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = 0;
 80011f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f6:	2200      	movs	r2, #0
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = PWM_MAX;
 80011fa:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80011fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 8001204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001208:	2200      	movs	r2, #0
 800120a:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800120c:	e05f      	b.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x80e>
		case 4:
			// PWM: B+, C+,   A- on
			TIM1->CCR1 = PWM_MAX;
 800120e:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001214:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = (on_val * sin_x(control_phase + B_OFFSET)) >> 15;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	b29b      	uxth	r3, r3
 800121a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800121e:	b29b      	uxth	r3, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f869 	bl	80012f8 <sin_x>
 8001226:	4602      	mov	r2, r0
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fb03 f302 	mul.w	r3, r3, r2
 800122e:	13da      	asrs	r2, r3, #15
 8001230:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001232:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = (on_val * sin_x(control_phase + C_OFFSET)) >> 15;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	b29b      	uxth	r3, r3
 8001238:	f203 1355 	addw	r3, r3, #341	; 0x155
 800123c:	b29b      	uxth	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f85a 	bl	80012f8 <sin_x>
 8001244:	4602      	mov	r2, r0
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fb03 f302 	mul.w	r3, r3, r2
 800124c:	13da      	asrs	r2, r3, #15
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001250:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = 0;
 8001252:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001256:	2200      	movs	r2, #0
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = PWM_MAX;
 800125a:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 800125e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001262:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = PWM_MAX;
 8001264:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800126c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800126e:	e02e      	b.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x80e>
		case 5:
			// PWM: A-, B-    C+ on
			TIM1->CCR1 = (on_val * -sin_x(control_phase + A_OFFSET)) >> 15;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	b29b      	uxth	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f83f 	bl	80012f8 <sin_x>
 800127a:	4603      	mov	r3, r0
 800127c:	425b      	negs	r3, r3
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	13da      	asrs	r2, r3, #15
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = (on_val * -sin_x(control_phase + B_OFFSET)) >> 15;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	b29b      	uxth	r3, r3
 800128e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001292:	b29b      	uxth	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f82f 	bl	80012f8 <sin_x>
 800129a:	4603      	mov	r3, r0
 800129c:	425b      	negs	r3, r3
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	fb02 f303 	mul.w	r3, r2, r3
 80012a4:	13da      	asrs	r2, r3, #15
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80012a8:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = PWM_MAX;
 80012aa:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80012b0:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR1 = 0;
 80012b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b6:	2200      	movs	r2, #0
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 80012ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012be:	2200      	movs	r2, #0
 80012c0:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = PWM_MAX;
 80012c2:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80012c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ca:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80012cc:	bf00      	nop
		}
		break;
 80012ce:	e005      	b.n	80012dc <HAL_TIM_PeriodElapsedCallback+0x81c>
		break;
 80012d0:	bf00      	nop
 80012d2:	e004      	b.n	80012de <HAL_TIM_PeriodElapsedCallback+0x81e>
		break;
 80012d4:	bf00      	nop
 80012d6:	e002      	b.n	80012de <HAL_TIM_PeriodElapsedCallback+0x81e>
		break;
 80012d8:	bf00      	nop
 80012da:	e000      	b.n	80012de <HAL_TIM_PeriodElapsedCallback+0x81e>
		break;
 80012dc:	bf00      	nop
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2108      	movs	r1, #8
 80012e2:	4804      	ldr	r0, [pc, #16]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x834>)
 80012e4:	f000 fc82 	bl	8001bec <HAL_GPIO_WritePin>
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40010000 	.word	0x40010000
 80012f4:	40020000 	.word	0x40020000

080012f8 <sin_x>:

// returns sin(angle), signed form, +- 0x8000.
// angle is assumed to be in 1024ths of a full cycle
int sin_x(uint16_t angle)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
	return ((int) sin_table[angle % 1024] - 0x8000);
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001308:	4a05      	ldr	r2, [pc, #20]	; (8001320 <sin_x+0x28>)
 800130a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800130e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	08003548 	.word	0x08003548

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	e7fe      	b.n	800132c <Error_Handler+0x8>
	...

08001330 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_MspInit+0x4c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <HAL_MspInit+0x4c>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x4c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x4c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a22      	ldr	r2, [pc, #136]	; (8001418 <HAL_TIM_Base_MspInit+0x98>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d10e      	bne.n	80013b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	4b21      	ldr	r3, [pc, #132]	; (800141c <HAL_TIM_Base_MspInit+0x9c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a20      	ldr	r2, [pc, #128]	; (800141c <HAL_TIM_Base_MspInit+0x9c>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_TIM_Base_MspInit+0x9c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ae:	e02e      	b.n	800140e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b8:	d10e      	bne.n	80013d8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_TIM_Base_MspInit+0x9c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a16      	ldr	r2, [pc, #88]	; (800141c <HAL_TIM_Base_MspInit+0x9c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_TIM_Base_MspInit+0x9c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
}
 80013d6:	e01a      	b.n	800140e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a10      	ldr	r2, [pc, #64]	; (8001420 <HAL_TIM_Base_MspInit+0xa0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d115      	bne.n	800140e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_TIM_Base_MspInit+0x9c>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a0c      	ldr	r2, [pc, #48]	; (800141c <HAL_TIM_Base_MspInit+0x9c>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_TIM_Base_MspInit+0x9c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	201d      	movs	r0, #29
 8001404:	f000 fa37 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001408:	201d      	movs	r0, #29
 800140a:	f000 fa50 	bl	80018ae <HAL_NVIC_EnableIRQ>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40010000 	.word	0x40010000
 800141c:	40023800 	.word	0x40023800
 8001420:	40000400 	.word	0x40000400

08001424 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <HAL_TIM_MspPostInit+0xb0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d11f      	bne.n	8001486 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_TIM_MspPostInit+0xb4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <HAL_TIM_MspPostInit+0xb4>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_TIM_MspPostInit+0xb4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = A_Hi_Pin|B_Hi_Pin|C_Hi_Pin;
 8001462:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001470:	2302      	movs	r3, #2
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001474:	2301      	movs	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4817      	ldr	r0, [pc, #92]	; (80014dc <HAL_TIM_MspPostInit+0xb8>)
 8001480:	f000 fa30 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001484:	e022      	b.n	80014cc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148e:	d11d      	bne.n	80014cc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_TIM_MspPostInit+0xb4>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <HAL_TIM_MspPostInit+0xb4>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6313      	str	r3, [r2, #48]	; 0x30
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_TIM_MspPostInit+0xb4>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = A_Lo_Pin|B_Lo_Pin|C_Lo_Pin;
 80014ac:	2307      	movs	r3, #7
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014bc:	2301      	movs	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_TIM_MspPostInit+0xb8>)
 80014c8:	f000 fa0c 	bl	80018e4 <HAL_GPIO_Init>
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40010000 	.word	0x40010000
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <NMI_Handler+0x4>

080014e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MemManage_Handler+0x4>

080014f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <UsageFault_Handler+0x4>

080014fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152c:	f000 f8a8 	bl	8001680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001538:	2040      	movs	r0, #64	; 0x40
 800153a:	f000 fb8b 	bl	8001c54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800153e:	2080      	movs	r0, #128	; 0x80
 8001540:	f000 fb88 	bl	8001c54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001544:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001548:	f000 fb84 	bl	8001c54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <TIM3_IRQHandler+0x10>)
 8001556:	f001 f965 	bl	8002824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000038 	.word	0x20000038

08001564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <SystemInit+0x20>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <SystemInit+0x20>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800158c:	480d      	ldr	r0, [pc, #52]	; (80015c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800158e:	490e      	ldr	r1, [pc, #56]	; (80015c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015a4:	4c0b      	ldr	r4, [pc, #44]	; (80015d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015b2:	f7ff ffd7 	bl	8001564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b6:	f001 ff8f 	bl	80034d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ba:	f7fe ffa9 	bl	8000510 <main>
  bx  lr    
 80015be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80015cc:	08003d68 	.word	0x08003d68
  ldr r2, =_sbss
 80015d0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80015d4:	20000114 	.word	0x20000114

080015d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC_IRQHandler>
	...

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <HAL_Init+0x40>)
 80015e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_Init+0x40>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_Init+0x40>)
 80015f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_Init+0x40>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a07      	ldr	r2, [pc, #28]	; (800161c <HAL_Init+0x40>)
 80015fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001604:	2003      	movs	r0, #3
 8001606:	f000 f92b 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160a:	200f      	movs	r0, #15
 800160c:	f000 f808 	bl	8001620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001610:	f7ff fe8e 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023c00 	.word	0x40023c00

08001620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_InitTick+0x54>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x58>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001636:	fbb3 f3f1 	udiv	r3, r3, r1
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f943 	bl	80018ca <HAL_SYSTICK_Config>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e00e      	b.n	800166c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b0f      	cmp	r3, #15
 8001652:	d80a      	bhi.n	800166a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001654:	2200      	movs	r2, #0
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f000 f90b 	bl	8001876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001660:	4a06      	ldr	r2, [pc, #24]	; (800167c <HAL_InitTick+0x5c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	e000      	b.n	800166c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000000c 	.word	0x2000000c
 8001678:	20000014 	.word	0x20000014
 800167c:	20000010 	.word	0x20000010

08001680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_IncTick+0x20>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x24>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_IncTick+0x24>)
 8001692:	6013      	str	r3, [r2, #0]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000014 	.word	0x20000014
 80016a4:	20000110 	.word	0x20000110

080016a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_GetTick+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000110 	.word	0x20000110

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db0b      	blt.n	800174e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <__NVIC_EnableIRQ+0x38>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	2001      	movs	r0, #1
 8001746:	fa00 f202 	lsl.w	r2, r0, r2
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800182c:	d301      	bcc.n	8001832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <SysTick_Config+0x40>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183a:	210f      	movs	r1, #15
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f7ff ff8e 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <SysTick_Config+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <SysTick_Config+0x40>)
 800184c:	2207      	movs	r2, #7
 800184e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff29 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff3e 	bl	8001708 <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff8e 	bl	80017b4 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5d 	bl	8001760 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff31 	bl	8001724 <__NVIC_EnableIRQ>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffa2 	bl	800181c <SysTick_Config>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	e159      	b.n	8001bb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001900:	2201      	movs	r2, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	429a      	cmp	r2, r3
 800191a:	f040 8148 	bne.w	8001bae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d005      	beq.n	8001936 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001932:	2b02      	cmp	r3, #2
 8001934:	d130      	bne.n	8001998 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2203      	movs	r2, #3
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 0201 	and.w	r2, r3, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d017      	beq.n	80019d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d123      	bne.n	8001a28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	08da      	lsrs	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3208      	adds	r2, #8
 80019e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	220f      	movs	r2, #15
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	08da      	lsrs	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3208      	adds	r2, #8
 8001a22:	69b9      	ldr	r1, [r7, #24]
 8001a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0203 	and.w	r2, r3, #3
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80a2 	beq.w	8001bae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <HAL_GPIO_Init+0x2e8>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a56      	ldr	r2, [pc, #344]	; (8001bcc <HAL_GPIO_Init+0x2e8>)
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b54      	ldr	r3, [pc, #336]	; (8001bcc <HAL_GPIO_Init+0x2e8>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a86:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_GPIO_Init+0x2ec>)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a49      	ldr	r2, [pc, #292]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d019      	beq.n	8001ae6 <HAL_GPIO_Init+0x202>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a48      	ldr	r2, [pc, #288]	; (8001bd8 <HAL_GPIO_Init+0x2f4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d013      	beq.n	8001ae2 <HAL_GPIO_Init+0x1fe>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a47      	ldr	r2, [pc, #284]	; (8001bdc <HAL_GPIO_Init+0x2f8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d00d      	beq.n	8001ade <HAL_GPIO_Init+0x1fa>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a46      	ldr	r2, [pc, #280]	; (8001be0 <HAL_GPIO_Init+0x2fc>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d007      	beq.n	8001ada <HAL_GPIO_Init+0x1f6>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a45      	ldr	r2, [pc, #276]	; (8001be4 <HAL_GPIO_Init+0x300>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d101      	bne.n	8001ad6 <HAL_GPIO_Init+0x1f2>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	e008      	b.n	8001ae8 <HAL_GPIO_Init+0x204>
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x204>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e004      	b.n	8001ae8 <HAL_GPIO_Init+0x204>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_Init+0x204>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x204>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	f002 0203 	and.w	r2, r2, #3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4093      	lsls	r3, r2
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af8:	4935      	ldr	r1, [pc, #212]	; (8001bd0 <HAL_GPIO_Init+0x2ec>)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b2a:	4a2f      	ldr	r2, [pc, #188]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b30:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b54:	4a24      	ldr	r2, [pc, #144]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7e:	4a1a      	ldr	r2, [pc, #104]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba8:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	f67f aea2 	bls.w	8001900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3724      	adds	r7, #36	; 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40013c00 	.word	0x40013c00

08001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bfc:	787b      	ldrb	r3, [r7, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c08:	e003      	b.n	8001c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	041a      	lsls	r2, r3, #16
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	619a      	str	r2, [r3, #24]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b085      	sub	sp, #20
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	460b      	mov	r3, r1
 8001c28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c30:	887a      	ldrh	r2, [r7, #2]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4013      	ands	r3, r2
 8001c36:	041a      	lsls	r2, r3, #16
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	400b      	ands	r3, r1
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe ff14 	bl	8000aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40013c00 	.word	0x40013c00

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e264      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d075      	beq.n	8001d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ca2:	4ba3      	ldr	r3, [pc, #652]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d00c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cae:	4ba0      	ldr	r3, [pc, #640]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d112      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cba:	4b9d      	ldr	r3, [pc, #628]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	4b99      	ldr	r3, [pc, #612]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d05b      	beq.n	8001d8c <HAL_RCC_OscConfig+0x108>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d157      	bne.n	8001d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e23f      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce8:	d106      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x74>
 8001cea:	4b91      	ldr	r3, [pc, #580]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a90      	ldr	r2, [pc, #576]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e01d      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x98>
 8001d02:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a8a      	ldr	r2, [pc, #552]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a87      	ldr	r2, [pc, #540]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001d1c:	4b84      	ldr	r3, [pc, #528]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a83      	ldr	r2, [pc, #524]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b81      	ldr	r3, [pc, #516]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a80      	ldr	r2, [pc, #512]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fcb4 	bl	80016a8 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fcb0 	bl	80016a8 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e204      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0xc0>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fca0 	bl	80016a8 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fc9c 	bl	80016a8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e1f0      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	4b6c      	ldr	r3, [pc, #432]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0xe8>
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d063      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d9a:	4b65      	ldr	r3, [pc, #404]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da6:	4b62      	ldr	r3, [pc, #392]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d11c      	bne.n	8001dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db2:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d116      	bne.n	8001dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x152>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e1c4      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	4b56      	ldr	r3, [pc, #344]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4952      	ldr	r1, [pc, #328]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	e03a      	b.n	8001e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df4:	4b4f      	ldr	r3, [pc, #316]	; (8001f34 <HAL_RCC_OscConfig+0x2b0>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fc55 	bl	80016a8 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e02:	f7ff fc51 	bl	80016a8 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1a5      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e20:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4940      	ldr	r1, [pc, #256]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
 8001e34:	e015      	b.n	8001e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <HAL_RCC_OscConfig+0x2b0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fc34 	bl	80016a8 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e44:	f7ff fc30 	bl	80016a8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e184      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d030      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d016      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e76:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_RCC_OscConfig+0x2b4>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fc14 	bl	80016a8 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e84:	f7ff fc10 	bl	80016a8 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e164      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x200>
 8001ea2:	e015      	b.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea4:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_RCC_OscConfig+0x2b4>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fbfd 	bl	80016a8 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb2:	f7ff fbf9 	bl	80016a8 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e14d      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80a0 	beq.w	800201e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10f      	bne.n	8001f0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	6413      	str	r3, [r2, #64]	; 0x40
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d121      	bne.n	8001f5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f26:	f7ff fbbf 	bl	80016a8 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	e011      	b.n	8001f52 <HAL_RCC_OscConfig+0x2ce>
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	42470000 	.word	0x42470000
 8001f38:	42470e80 	.word	0x42470e80
 8001f3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f40:	f7ff fbb2 	bl	80016a8 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e106      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f52:	4b85      	ldr	r3, [pc, #532]	; (8002168 <HAL_RCC_OscConfig+0x4e4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d106      	bne.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
 8001f66:	4b81      	ldr	r3, [pc, #516]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a80      	ldr	r2, [pc, #512]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
 8001f72:	e01c      	b.n	8001fae <HAL_RCC_OscConfig+0x32a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCC_OscConfig+0x312>
 8001f7c:	4b7b      	ldr	r3, [pc, #492]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	4a7a      	ldr	r2, [pc, #488]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6713      	str	r3, [r2, #112]	; 0x70
 8001f88:	4b78      	ldr	r3, [pc, #480]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	4a77      	ldr	r2, [pc, #476]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6713      	str	r3, [r2, #112]	; 0x70
 8001f94:	e00b      	b.n	8001fae <HAL_RCC_OscConfig+0x32a>
 8001f96:	4b75      	ldr	r3, [pc, #468]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	4a74      	ldr	r2, [pc, #464]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa2:	4b72      	ldr	r3, [pc, #456]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa6:	4a71      	ldr	r2, [pc, #452]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001fa8:	f023 0304 	bic.w	r3, r3, #4
 8001fac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d015      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fb77 	bl	80016a8 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff fb73 	bl	80016a8 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0c5      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	4b65      	ldr	r3, [pc, #404]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ee      	beq.n	8001fbe <HAL_RCC_OscConfig+0x33a>
 8001fe0:	e014      	b.n	800200c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fb61 	bl	80016a8 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff fb5d 	bl	80016a8 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0af      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002000:	4b5a      	ldr	r3, [pc, #360]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1ee      	bne.n	8001fea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d105      	bne.n	800201e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002012:	4b56      	ldr	r3, [pc, #344]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	4a55      	ldr	r2, [pc, #340]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8002018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 809b 	beq.w	800215e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002028:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b08      	cmp	r3, #8
 8002032:	d05c      	beq.n	80020ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d141      	bne.n	80020c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <HAL_RCC_OscConfig+0x4ec>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff fb31 	bl	80016a8 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204a:	f7ff fb2d 	bl	80016a8 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e081      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205c:	4b43      	ldr	r3, [pc, #268]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	019b      	lsls	r3, r3, #6
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	085b      	lsrs	r3, r3, #1
 8002080:	3b01      	subs	r3, #1
 8002082:	041b      	lsls	r3, r3, #16
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	061b      	lsls	r3, r3, #24
 800208c:	4937      	ldr	r1, [pc, #220]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002092:	4b37      	ldr	r3, [pc, #220]	; (8002170 <HAL_RCC_OscConfig+0x4ec>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff fb06 	bl	80016a8 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff fb02 	bl	80016a8 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e056      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	4b2e      	ldr	r3, [pc, #184]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x41c>
 80020be:	e04e      	b.n	800215e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <HAL_RCC_OscConfig+0x4ec>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff faef 	bl	80016a8 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ce:	f7ff faeb 	bl	80016a8 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e03f      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e0:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f0      	bne.n	80020ce <HAL_RCC_OscConfig+0x44a>
 80020ec:	e037      	b.n	800215e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e032      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d028      	beq.n	800215a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d121      	bne.n	800215a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d11a      	bne.n	800215a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800212a:	4013      	ands	r3, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002130:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002132:	4293      	cmp	r3, r2
 8002134:	d111      	bne.n	800215a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	3b01      	subs	r3, #1
 8002144:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002146:	429a      	cmp	r2, r3
 8002148:	d107      	bne.n	800215a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40007000 	.word	0x40007000
 800216c:	40023800 	.word	0x40023800
 8002170:	42470060 	.word	0x42470060

08002174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0cc      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d90c      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b65      	ldr	r3, [pc, #404]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d044      	beq.n	8002294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d119      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d003      	beq.n	8002232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800222e:	2b03      	cmp	r3, #3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e067      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b37      	ldr	r3, [pc, #220]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4934      	ldr	r1, [pc, #208]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7ff fa20 	bl	80016a8 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7ff fa1c 	bl	80016a8 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e04f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d20c      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f980 	bl	8001620 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00
 8002330:	40023800 	.word	0x40023800
 8002334:	08003d48 	.word	0x08003d48
 8002338:	2000000c 	.word	0x2000000c
 800233c:	20000010 	.word	0x20000010

08002340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b5b0      	push	{r4, r5, r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002346:	2100      	movs	r1, #0
 8002348:	6079      	str	r1, [r7, #4]
 800234a:	2100      	movs	r1, #0
 800234c:	60f9      	str	r1, [r7, #12]
 800234e:	2100      	movs	r1, #0
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002352:	2100      	movs	r1, #0
 8002354:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002356:	4952      	ldr	r1, [pc, #328]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002358:	6889      	ldr	r1, [r1, #8]
 800235a:	f001 010c 	and.w	r1, r1, #12
 800235e:	2908      	cmp	r1, #8
 8002360:	d00d      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x3e>
 8002362:	2908      	cmp	r1, #8
 8002364:	f200 8094 	bhi.w	8002490 <HAL_RCC_GetSysClockFreq+0x150>
 8002368:	2900      	cmp	r1, #0
 800236a:	d002      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x32>
 800236c:	2904      	cmp	r1, #4
 800236e:	d003      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x38>
 8002370:	e08e      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002372:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002374:	60bb      	str	r3, [r7, #8]
       break;
 8002376:	e08e      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002378:	4b4b      	ldr	r3, [pc, #300]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800237a:	60bb      	str	r3, [r7, #8]
      break;
 800237c:	e08b      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800237e:	4948      	ldr	r1, [pc, #288]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002380:	6849      	ldr	r1, [r1, #4]
 8002382:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002386:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002388:	4945      	ldr	r1, [pc, #276]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800238a:	6849      	ldr	r1, [r1, #4]
 800238c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002390:	2900      	cmp	r1, #0
 8002392:	d024      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002394:	4942      	ldr	r1, [pc, #264]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002396:	6849      	ldr	r1, [r1, #4]
 8002398:	0989      	lsrs	r1, r1, #6
 800239a:	4608      	mov	r0, r1
 800239c:	f04f 0100 	mov.w	r1, #0
 80023a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80023a4:	f04f 0500 	mov.w	r5, #0
 80023a8:	ea00 0204 	and.w	r2, r0, r4
 80023ac:	ea01 0305 	and.w	r3, r1, r5
 80023b0:	493d      	ldr	r1, [pc, #244]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80023b2:	fb01 f003 	mul.w	r0, r1, r3
 80023b6:	2100      	movs	r1, #0
 80023b8:	fb01 f102 	mul.w	r1, r1, r2
 80023bc:	1844      	adds	r4, r0, r1
 80023be:	493a      	ldr	r1, [pc, #232]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80023c0:	fba2 0101 	umull	r0, r1, r2, r1
 80023c4:	1863      	adds	r3, r4, r1
 80023c6:	4619      	mov	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	f7fd ff00 	bl	80001d4 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4613      	mov	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e04a      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023de:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	461a      	mov	r2, r3
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023ee:	f04f 0100 	mov.w	r1, #0
 80023f2:	ea02 0400 	and.w	r4, r2, r0
 80023f6:	ea03 0501 	and.w	r5, r3, r1
 80023fa:	4620      	mov	r0, r4
 80023fc:	4629      	mov	r1, r5
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	014b      	lsls	r3, r1, #5
 8002408:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800240c:	0142      	lsls	r2, r0, #5
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	1b00      	subs	r0, r0, r4
 8002414:	eb61 0105 	sbc.w	r1, r1, r5
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	018b      	lsls	r3, r1, #6
 8002422:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002426:	0182      	lsls	r2, r0, #6
 8002428:	1a12      	subs	r2, r2, r0
 800242a:	eb63 0301 	sbc.w	r3, r3, r1
 800242e:	f04f 0000 	mov.w	r0, #0
 8002432:	f04f 0100 	mov.w	r1, #0
 8002436:	00d9      	lsls	r1, r3, #3
 8002438:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800243c:	00d0      	lsls	r0, r2, #3
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	1912      	adds	r2, r2, r4
 8002444:	eb45 0303 	adc.w	r3, r5, r3
 8002448:	f04f 0000 	mov.w	r0, #0
 800244c:	f04f 0100 	mov.w	r1, #0
 8002450:	0299      	lsls	r1, r3, #10
 8002452:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002456:	0290      	lsls	r0, r2, #10
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	461a      	mov	r2, r3
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	f7fd feb4 	bl	80001d4 <__aeabi_uldivmod>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4613      	mov	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	3301      	adds	r3, #1
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	60bb      	str	r3, [r7, #8]
      break;
 800248e:	e002      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002492:	60bb      	str	r3, [r7, #8]
      break;
 8002494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002496:	68bb      	ldr	r3, [r7, #8]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bdb0      	pop	{r4, r5, r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	00f42400 	.word	0x00f42400
 80024a8:	017d7840 	.word	0x017d7840

080024ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e041      	b.n	8002542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe ff54 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f000 fc54 	bl	8002d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d001      	beq.n	8002564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e044      	b.n	80025ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1e      	ldr	r2, [pc, #120]	; (80025fc <HAL_TIM_Base_Start_IT+0xb0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d018      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x6c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258e:	d013      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x6c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1a      	ldr	r2, [pc, #104]	; (8002600 <HAL_TIM_Base_Start_IT+0xb4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00e      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x6c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a19      	ldr	r2, [pc, #100]	; (8002604 <HAL_TIM_Base_Start_IT+0xb8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d009      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x6c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a17      	ldr	r2, [pc, #92]	; (8002608 <HAL_TIM_Base_Start_IT+0xbc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x6c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a16      	ldr	r2, [pc, #88]	; (800260c <HAL_TIM_Base_Start_IT+0xc0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d111      	bne.n	80025dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d010      	beq.n	80025ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025da:	e007      	b.n	80025ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40010000 	.word	0x40010000
 8002600:	40000400 	.word	0x40000400
 8002604:	40000800 	.word	0x40000800
 8002608:	40000c00 	.word	0x40000c00
 800260c:	40014000 	.word	0x40014000

08002610 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e041      	b.n	80026a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f839 	bl	80026ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3304      	adds	r3, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f000 fba2 	bl	8002d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_TIM_PWM_Start+0x24>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e022      	b.n	800272e <HAL_TIM_PWM_Start+0x6a>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d109      	bne.n	8002702 <HAL_TIM_PWM_Start+0x3e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	bf14      	ite	ne
 80026fa:	2301      	movne	r3, #1
 80026fc:	2300      	moveq	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	e015      	b.n	800272e <HAL_TIM_PWM_Start+0x6a>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d109      	bne.n	800271c <HAL_TIM_PWM_Start+0x58>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	e008      	b.n	800272e <HAL_TIM_PWM_Start+0x6a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e068      	b.n	8002808 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d104      	bne.n	8002746 <HAL_TIM_PWM_Start+0x82>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002744:	e013      	b.n	800276e <HAL_TIM_PWM_Start+0xaa>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b04      	cmp	r3, #4
 800274a:	d104      	bne.n	8002756 <HAL_TIM_PWM_Start+0x92>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002754:	e00b      	b.n	800276e <HAL_TIM_PWM_Start+0xaa>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d104      	bne.n	8002766 <HAL_TIM_PWM_Start+0xa2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002764:	e003      	b.n	800276e <HAL_TIM_PWM_Start+0xaa>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2202      	movs	r2, #2
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2201      	movs	r2, #1
 8002774:	6839      	ldr	r1, [r7, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fdb4 	bl	80032e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a23      	ldr	r2, [pc, #140]	; (8002810 <HAL_TIM_PWM_Start+0x14c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d107      	bne.n	8002796 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <HAL_TIM_PWM_Start+0x14c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d018      	beq.n	80027d2 <HAL_TIM_PWM_Start+0x10e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a8:	d013      	beq.n	80027d2 <HAL_TIM_PWM_Start+0x10e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a19      	ldr	r2, [pc, #100]	; (8002814 <HAL_TIM_PWM_Start+0x150>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00e      	beq.n	80027d2 <HAL_TIM_PWM_Start+0x10e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a17      	ldr	r2, [pc, #92]	; (8002818 <HAL_TIM_PWM_Start+0x154>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d009      	beq.n	80027d2 <HAL_TIM_PWM_Start+0x10e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a16      	ldr	r2, [pc, #88]	; (800281c <HAL_TIM_PWM_Start+0x158>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d004      	beq.n	80027d2 <HAL_TIM_PWM_Start+0x10e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a14      	ldr	r2, [pc, #80]	; (8002820 <HAL_TIM_PWM_Start+0x15c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d111      	bne.n	80027f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b06      	cmp	r3, #6
 80027e2:	d010      	beq.n	8002806 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f4:	e007      	b.n	8002806 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40010000 	.word	0x40010000
 8002814:	40000400 	.word	0x40000400
 8002818:	40000800 	.word	0x40000800
 800281c:	40000c00 	.word	0x40000c00
 8002820:	40014000 	.word	0x40014000

08002824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d122      	bne.n	8002880 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b02      	cmp	r3, #2
 8002846:	d11b      	bne.n	8002880 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0202 	mvn.w	r2, #2
 8002850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fa77 	bl	8002d5a <HAL_TIM_IC_CaptureCallback>
 800286c:	e005      	b.n	800287a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fa69 	bl	8002d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fa7a 	bl	8002d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b04      	cmp	r3, #4
 800288c:	d122      	bne.n	80028d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b04      	cmp	r3, #4
 800289a:	d11b      	bne.n	80028d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0204 	mvn.w	r2, #4
 80028a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fa4d 	bl	8002d5a <HAL_TIM_IC_CaptureCallback>
 80028c0:	e005      	b.n	80028ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fa3f 	bl	8002d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fa50 	bl	8002d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d122      	bne.n	8002928 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d11b      	bne.n	8002928 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0208 	mvn.w	r2, #8
 80028f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2204      	movs	r2, #4
 80028fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fa23 	bl	8002d5a <HAL_TIM_IC_CaptureCallback>
 8002914:	e005      	b.n	8002922 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fa15 	bl	8002d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fa26 	bl	8002d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b10      	cmp	r3, #16
 8002934:	d122      	bne.n	800297c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b10      	cmp	r3, #16
 8002942:	d11b      	bne.n	800297c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0210 	mvn.w	r2, #16
 800294c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2208      	movs	r2, #8
 8002952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f9f9 	bl	8002d5a <HAL_TIM_IC_CaptureCallback>
 8002968:	e005      	b.n	8002976 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f9eb 	bl	8002d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f9fc 	bl	8002d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b01      	cmp	r3, #1
 8002988:	d10e      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b01      	cmp	r3, #1
 8002996:	d107      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0201 	mvn.w	r2, #1
 80029a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe f88c 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b2:	2b80      	cmp	r3, #128	; 0x80
 80029b4:	d10e      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	2b80      	cmp	r3, #128	; 0x80
 80029c2:	d107      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fd78 	bl	80034c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b40      	cmp	r3, #64	; 0x40
 80029e0:	d10e      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ec:	2b40      	cmp	r3, #64	; 0x40
 80029ee:	d107      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f9c1 	bl	8002d82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d10e      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d107      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0220 	mvn.w	r2, #32
 8002a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fd42 	bl	80034b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e0ae      	b.n	8002bb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b0c      	cmp	r3, #12
 8002a5e:	f200 809f 	bhi.w	8002ba0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a62:	a201      	add	r2, pc, #4	; (adr r2, 8002a68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a68:	08002a9d 	.word	0x08002a9d
 8002a6c:	08002ba1 	.word	0x08002ba1
 8002a70:	08002ba1 	.word	0x08002ba1
 8002a74:	08002ba1 	.word	0x08002ba1
 8002a78:	08002add 	.word	0x08002add
 8002a7c:	08002ba1 	.word	0x08002ba1
 8002a80:	08002ba1 	.word	0x08002ba1
 8002a84:	08002ba1 	.word	0x08002ba1
 8002a88:	08002b1f 	.word	0x08002b1f
 8002a8c:	08002ba1 	.word	0x08002ba1
 8002a90:	08002ba1 	.word	0x08002ba1
 8002a94:	08002ba1 	.word	0x08002ba1
 8002a98:	08002b5f 	.word	0x08002b5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f9f8 	bl	8002e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0208 	orr.w	r2, r2, #8
 8002ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0204 	bic.w	r2, r2, #4
 8002ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6999      	ldr	r1, [r3, #24]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	619a      	str	r2, [r3, #24]
      break;
 8002ada:	e064      	b.n	8002ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fa3e 	bl	8002f64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6999      	ldr	r1, [r3, #24]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	021a      	lsls	r2, r3, #8
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	619a      	str	r2, [r3, #24]
      break;
 8002b1c:	e043      	b.n	8002ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fa89 	bl	800303c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69da      	ldr	r2, [r3, #28]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0208 	orr.w	r2, r2, #8
 8002b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0204 	bic.w	r2, r2, #4
 8002b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69d9      	ldr	r1, [r3, #28]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	61da      	str	r2, [r3, #28]
      break;
 8002b5c:	e023      	b.n	8002ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fad3 	bl	8003110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69da      	ldr	r2, [r3, #28]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69d9      	ldr	r1, [r3, #28]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	021a      	lsls	r2, r3, #8
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	61da      	str	r2, [r3, #28]
      break;
 8002b9e:	e002      	b.n	8002ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ba4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_TIM_ConfigClockSource+0x1c>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e0b4      	b.n	8002d3e <HAL_TIM_ConfigClockSource+0x186>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0c:	d03e      	beq.n	8002c8c <HAL_TIM_ConfigClockSource+0xd4>
 8002c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c12:	f200 8087 	bhi.w	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1a:	f000 8086 	beq.w	8002d2a <HAL_TIM_ConfigClockSource+0x172>
 8002c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c22:	d87f      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c24:	2b70      	cmp	r3, #112	; 0x70
 8002c26:	d01a      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0xa6>
 8002c28:	2b70      	cmp	r3, #112	; 0x70
 8002c2a:	d87b      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c2c:	2b60      	cmp	r3, #96	; 0x60
 8002c2e:	d050      	beq.n	8002cd2 <HAL_TIM_ConfigClockSource+0x11a>
 8002c30:	2b60      	cmp	r3, #96	; 0x60
 8002c32:	d877      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c34:	2b50      	cmp	r3, #80	; 0x50
 8002c36:	d03c      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0xfa>
 8002c38:	2b50      	cmp	r3, #80	; 0x50
 8002c3a:	d873      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d058      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x13a>
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d86f      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c44:	2b30      	cmp	r3, #48	; 0x30
 8002c46:	d064      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0x15a>
 8002c48:	2b30      	cmp	r3, #48	; 0x30
 8002c4a:	d86b      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d060      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0x15a>
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d867      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d05c      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0x15a>
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	d05a      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0x15a>
 8002c5c:	e062      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6899      	ldr	r1, [r3, #8]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f000 fb19 	bl	80032a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	609a      	str	r2, [r3, #8]
      break;
 8002c8a:	e04f      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6899      	ldr	r1, [r3, #8]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f000 fb02 	bl	80032a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cae:	609a      	str	r2, [r3, #8]
      break;
 8002cb0:	e03c      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6859      	ldr	r1, [r3, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f000 fa76 	bl	80031b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2150      	movs	r1, #80	; 0x50
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 facf 	bl	800326e <TIM_ITRx_SetConfig>
      break;
 8002cd0:	e02c      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f000 fa95 	bl	800320e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2160      	movs	r1, #96	; 0x60
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fabf 	bl	800326e <TIM_ITRx_SetConfig>
      break;
 8002cf0:	e01c      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f000 fa56 	bl	80031b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2140      	movs	r1, #64	; 0x40
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 faaf 	bl	800326e <TIM_ITRx_SetConfig>
      break;
 8002d10:	e00c      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f000 faa6 	bl	800326e <TIM_ITRx_SetConfig>
      break;
 8002d22:	e003      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      break;
 8002d28:	e000      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a34      	ldr	r2, [pc, #208]	; (8002e7c <TIM_Base_SetConfig+0xe4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00f      	beq.n	8002dd0 <TIM_Base_SetConfig+0x38>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db6:	d00b      	beq.n	8002dd0 <TIM_Base_SetConfig+0x38>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a31      	ldr	r2, [pc, #196]	; (8002e80 <TIM_Base_SetConfig+0xe8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d007      	beq.n	8002dd0 <TIM_Base_SetConfig+0x38>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a30      	ldr	r2, [pc, #192]	; (8002e84 <TIM_Base_SetConfig+0xec>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <TIM_Base_SetConfig+0x38>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a2f      	ldr	r2, [pc, #188]	; (8002e88 <TIM_Base_SetConfig+0xf0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d108      	bne.n	8002de2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a25      	ldr	r2, [pc, #148]	; (8002e7c <TIM_Base_SetConfig+0xe4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d01b      	beq.n	8002e22 <TIM_Base_SetConfig+0x8a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df0:	d017      	beq.n	8002e22 <TIM_Base_SetConfig+0x8a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <TIM_Base_SetConfig+0xe8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <TIM_Base_SetConfig+0x8a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <TIM_Base_SetConfig+0xec>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00f      	beq.n	8002e22 <TIM_Base_SetConfig+0x8a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <TIM_Base_SetConfig+0xf0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00b      	beq.n	8002e22 <TIM_Base_SetConfig+0x8a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <TIM_Base_SetConfig+0xf4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d007      	beq.n	8002e22 <TIM_Base_SetConfig+0x8a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <TIM_Base_SetConfig+0xf8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d003      	beq.n	8002e22 <TIM_Base_SetConfig+0x8a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <TIM_Base_SetConfig+0xfc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d108      	bne.n	8002e34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <TIM_Base_SetConfig+0xe4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d103      	bne.n	8002e68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	615a      	str	r2, [r3, #20]
}
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40000800 	.word	0x40000800
 8002e88:	40000c00 	.word	0x40000c00
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	40014400 	.word	0x40014400
 8002e94:	40014800 	.word	0x40014800

08002e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f023 0201 	bic.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0303 	bic.w	r3, r3, #3
 8002ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f023 0302 	bic.w	r3, r3, #2
 8002ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <TIM_OC1_SetConfig+0xc8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d10c      	bne.n	8002f0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f023 0308 	bic.w	r3, r3, #8
 8002efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f023 0304 	bic.w	r3, r3, #4
 8002f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <TIM_OC1_SetConfig+0xc8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d111      	bne.n	8002f3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	621a      	str	r2, [r3, #32]
}
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40010000 	.word	0x40010000

08002f64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	f023 0210 	bic.w	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 0320 	bic.w	r3, r3, #32
 8002fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <TIM_OC2_SetConfig+0xd4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d10d      	bne.n	8002fe0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a15      	ldr	r2, [pc, #84]	; (8003038 <TIM_OC2_SetConfig+0xd4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d113      	bne.n	8003010 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	621a      	str	r2, [r3, #32]
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40010000 	.word	0x40010000

0800303c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0303 	bic.w	r3, r3, #3
 8003072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a1d      	ldr	r2, [pc, #116]	; (800310c <TIM_OC3_SetConfig+0xd0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d10d      	bne.n	80030b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a14      	ldr	r2, [pc, #80]	; (800310c <TIM_OC3_SetConfig+0xd0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d113      	bne.n	80030e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	40010000 	.word	0x40010000

08003110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800315a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	031b      	lsls	r3, r3, #12
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <TIM_OC4_SetConfig+0x9c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d109      	bne.n	8003184 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	019b      	lsls	r3, r3, #6
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	621a      	str	r2, [r3, #32]
}
 800319e:	bf00      	nop
 80031a0:	371c      	adds	r7, #28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40010000 	.word	0x40010000

080031b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f023 0201 	bic.w	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f023 030a 	bic.w	r3, r3, #10
 80031ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	621a      	str	r2, [r3, #32]
}
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800320e:	b480      	push	{r7}
 8003210:	b087      	sub	sp, #28
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	f023 0210 	bic.w	r2, r3, #16
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	031b      	lsls	r3, r3, #12
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800324a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800326e:	b480      	push	{r7}
 8003270:	b085      	sub	sp, #20
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	f043 0307 	orr.w	r3, r3, #7
 8003290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	609a      	str	r2, [r3, #8]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	021a      	lsls	r2, r3, #8
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	609a      	str	r2, [r3, #8]
}
 80032d8:	bf00      	nop
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2201      	movs	r2, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a1a      	ldr	r2, [r3, #32]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	43db      	mvns	r3, r3
 8003306:	401a      	ands	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a1a      	ldr	r2, [r3, #32]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	431a      	orrs	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003344:	2302      	movs	r3, #2
 8003346:	e050      	b.n	80033ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1c      	ldr	r2, [pc, #112]	; (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d018      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003394:	d013      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a18      	ldr	r2, [pc, #96]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00e      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a16      	ldr	r2, [pc, #88]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d009      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d004      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a13      	ldr	r2, [pc, #76]	; (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10c      	bne.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40010000 	.word	0x40010000
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800
 8003404:	40000c00 	.word	0x40000c00
 8003408:	40014000 	.word	0x40014000

0800340c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003424:	2302      	movs	r3, #2
 8003426:	e03d      	b.n	80034a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <__libc_init_array>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	4d0d      	ldr	r5, [pc, #52]	; (8003510 <__libc_init_array+0x38>)
 80034dc:	4c0d      	ldr	r4, [pc, #52]	; (8003514 <__libc_init_array+0x3c>)
 80034de:	1b64      	subs	r4, r4, r5
 80034e0:	10a4      	asrs	r4, r4, #2
 80034e2:	2600      	movs	r6, #0
 80034e4:	42a6      	cmp	r6, r4
 80034e6:	d109      	bne.n	80034fc <__libc_init_array+0x24>
 80034e8:	4d0b      	ldr	r5, [pc, #44]	; (8003518 <__libc_init_array+0x40>)
 80034ea:	4c0c      	ldr	r4, [pc, #48]	; (800351c <__libc_init_array+0x44>)
 80034ec:	f000 f820 	bl	8003530 <_init>
 80034f0:	1b64      	subs	r4, r4, r5
 80034f2:	10a4      	asrs	r4, r4, #2
 80034f4:	2600      	movs	r6, #0
 80034f6:	42a6      	cmp	r6, r4
 80034f8:	d105      	bne.n	8003506 <__libc_init_array+0x2e>
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003500:	4798      	blx	r3
 8003502:	3601      	adds	r6, #1
 8003504:	e7ee      	b.n	80034e4 <__libc_init_array+0xc>
 8003506:	f855 3b04 	ldr.w	r3, [r5], #4
 800350a:	4798      	blx	r3
 800350c:	3601      	adds	r6, #1
 800350e:	e7f2      	b.n	80034f6 <__libc_init_array+0x1e>
 8003510:	08003d60 	.word	0x08003d60
 8003514:	08003d60 	.word	0x08003d60
 8003518:	08003d60 	.word	0x08003d60
 800351c:	08003d64 	.word	0x08003d64

08003520 <memset>:
 8003520:	4402      	add	r2, r0
 8003522:	4603      	mov	r3, r0
 8003524:	4293      	cmp	r3, r2
 8003526:	d100      	bne.n	800352a <memset+0xa>
 8003528:	4770      	bx	lr
 800352a:	f803 1b01 	strb.w	r1, [r3], #1
 800352e:	e7f9      	b.n	8003524 <memset+0x4>

08003530 <_init>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	bf00      	nop
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr

0800353c <_fini>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	bf00      	nop
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr
